<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.milepost</groupId>
		<artifactId>milepost-parent</artifactId>
		<version>1.0.0-SNAPSHOT</version>
		<relativePath/>
	</parent>

	<artifactId>milepost-ui</artifactId>
	<packaging>jar</packaging>
	<name>milepost-ui</name>
	<description>ui</description>
	<!--
	继承milepost-parent，
	所有ui都应该依赖这个pom，
	dependencies中指定了所有ui都需要的依赖，
	里面可以提供一些前端代码，但这个pom与具体的业务系统ui的关系需要研究一下
	-->

	<dependencies>
		<!--单元测试-->
		<dependency>
			<groupId>com.milepost</groupId>
			<artifactId>milepost-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.milepost</groupId>
			<artifactId>milepost-log</artifactId>
		</dependency>
		<dependency>
			<groupId>com.milepost</groupId>
			<artifactId>milepost-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<!--openfeign-->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-openfeign</artifactId>
		</dependency>

		<!--hystrix，
		如果只是用@FeignClient的fallback则不需要依赖hystrix，
		如果要使用断路器@EnableHystrix/@HystrixCommand，则需要依赖hystrix，
		同时会给@FeignClient的fallback增加断路器功能。-->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-hystrix</artifactId>
		</dependency>
		<!--hystrix的dashboard，不使用单独的dashboard，使用turbine聚合dashboard-->
		<!--<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-hystrix-dashboard</artifactId>
		</dependency>-->

		<!--ribbon，暂时不需要单独引入，因为openfeign已经集成(依赖)了ribbon-->
		<!--<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-ribbon</artifactId>
		</dependency>-->

		<!--actuator-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<!--支持springboot的http 监控端点-->
		<dependency>
			<groupId>org.springframework.hateoas</groupId>
			<artifactId>spring-hateoas</artifactId>
		</dependency>

		<!--读取spring配置文件-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>

		<!--认证-->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-jwt</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.security.oauth</groupId>
			<artifactId>spring-security-oauth2</artifactId>
		</dependency>

	</dependencies>

</project>
